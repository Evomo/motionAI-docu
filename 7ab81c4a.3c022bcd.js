(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{141:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var i=n(1),a=n(9),c=(n(0),n(159)),o={id:"documentation",title:"Swift API",sidebar_label:"Swift API"},r={id:"documentation",title:"Swift API",description:"## Details",source:"@site/docs/documentation.md",permalink:"/motionAI-docu/docs/documentation",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation.md",sidebar_label:"Swift API",sidebar:"someSidebar",previous:{title:"How to scan for Movesense sensors?",permalink:"/motionAI-docu/docs/scan-movesense"},next:{title:"In Development",permalink:"/motionAI-docu/docs/inDevelopment"}},s=[{value:"Details",id:"details",children:[{value:"Initialise the EVOControlLayer",id:"initialise-the-evocontrollayer",children:[]},{value:"Setup licenseID",id:"setup-licenseid",children:[]},{value:"Setup the source device",id:"setup-the-source-device",children:[]},{value:"Setup the subscriptions",id:"setup-the-subscriptions",children:[]},{value:"Start and stop movement classification",id:"start-and-stop-movement-classification",children:[]}]},{value:"Models",id:"models",children:[{value:"Device",id:"device",children:[]},{value:"DeviceType",id:"devicetype",children:[]},{value:"DevicePosition",id:"deviceposition",children:[]},{value:"DeviceOrientation",id:"deviceorientation",children:[]},{value:"WorkoutFile",id:"workoutfile",children:[]},{value:"Movement",id:"movement",children:[]},{value:"DeviceStateChange",id:"devicestatechange",children:[]}]},{value:"Scan for Movesense ble devices",id:"scan-for-movesense-ble-devices",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"details"},"Details"),Object(c.b)("h3",{id:"initialise-the-evocontrollayer"},"Initialise the EVOControlLayer"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"import EvomoMotionAI\n\n// Init the ClassificationControlLayer\nlet controlLayer = ClassificationControlLayer.shared\n")),Object(c.b)("h3",{id:"setup-licenseid"},"Setup licenseID"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'// Declare licenseID string once (You will receive the license key from Evomo after agreeing to the license conditions.)\nClassificationControlLayer.shared.setLicense(licenseID: "licenseID-String")\n')),Object(c.b)("h3",{id:"setup-the-source-device"},"Setup the source device"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'// Define sensor device\ncontrolLayer.device = Device(deviceID: "", // Device ID \n                             deviceType: .iPhone, // Device type\n                             devicePosition: .Belly, // Position of the smartphone\n                             deviceOrientation: .buttonRight) \n')),Object(c.b)("h4",{id:"iphone"},"iPhone"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'Device(deviceID: "", // id for iphone device not relevant\n       deviceType: .iphone,\n       ..)\n')),Object(c.b)("h4",{id:"movesense"},"Movesense"),Object(c.b)("p",null,"deviceID: Ident string (serial number) of the movesense sensor"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'Device(deviceID: "175030001022", \n       deviceType: .movesense,\n       ..)\n')),Object(c.b)("h4",{id:"artificialsimulator"},"Artificial/Simulator"),Object(c.b)("p",null,"Simulate device sensor by loading a workout file. (helpful to debug or test in simulator)"),Object(c.b)("p",null,"Note: Wait about 5 seconds for the first movement after starting. The artificial source for simulation only works with belly-based classification models."),Object(c.b)("p",null,"Default WorkoutFile is JumpingJack. If you want to select another WorkoutFile -> use the detail property of the device."),Object(c.b)("p",null,"If you use the simulator the device is automatically changed to the artificial source."),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"Device(deviceType: .iPhone,\n       devicePosition: .belly, // !!!\n       deviceOrientation: .buttonRight, // !!!\n       ...\n       \n       details: WorkoutFile.squats.rawValue\n       )\n")),Object(c.b)("h3",{id:"setup-the-subscriptions"},"Setup the subscriptions"),Object(c.b)("p",null,"There are three main subscription handler:"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"movementHandler - executes on a new classified movement")),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"// Subscribe to the classified movements\ncontrolLayer.movementHandler = { movement in\n    // Do something with the classified movements in time\n}\n")),Object(c.b)("ol",{start:2},Object(c.b)("li",{parentName:"ol"},"heartRatehandler - executes on a heart rate value change")),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"// Subscribe to the classified movements\ncontrolLayer.movementHandler = { movement in\n    // Do something with the classified movements in time\n}\n")),Object(c.b)("ol",{start:3},Object(c.b)("li",{parentName:"ol"},"deviceEventHandler - execute on new device event")),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"// Handle device events\nClassificationControlLayer.shared.deviceEventHandler = { deviceEvent in\n    let (device, event) = deviceEvent\n    \n    switch event {\n    case let .dataStraming(state):\n        // Will be triggered on data streaming state change (Bool)\n        // dataStraming = true if sensor data received in the last 0.2 seconds\n        \n    case let .connected(connected):\n        // Will be triggered if the device successfully connect or disconnect\n        \n    case let .energyPercent(energyPercent):\n        // Implemented for movesense devices (Apple devices dont return a energy level)\n        // The energy level will always emit on after connecting to the device.\n        \n    case let .softwareVersion(version):\n        // not implemented now\n        // Will return the software version of the device after connecting\n    }\n}\n\n// types\npublic typealias DeviceEvent = (Device, DeviceStateChange)\n\n\npublic enum DeviceStateChange: Equatable {\n    case energyPercent(Double)\n    case dataStraming(Bool)\n    case connected(Bool)\n    case softwareVersion(String)\n}\n")),Object(c.b)("h3",{id:"start-and-stop-movement-classification"},"Start and stop movement classification"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"\n// Start movement classification\nClassificationControlLayer.shared.start(\n    lookingForMovementType: nil,\n    isConnected: {\n        // Do something if connected successful\n    }, connectingFailed: { error in\n\n        // Do something if connecting failed\n    })\n\n// Stop movement classification\n_ = ClassificationControlLayer.shared.stop()\n")),Object(c.b)("h2",{id:"models"},"Models"),Object(c.b)("h3",{id:"device"},"Device"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"\npublic struct Device {\n\n    public var deviceID: String\n    public let deviceType: DeviceType\n    public let devicePosition: DevicePosition\n    public let deviceOrientation: DeviceOrientation\n    public let deviceForward: Bool = true\n    public let heartRate: Bool // if true -> record heartRate\n    public var classificationModel: String // customize classification model\n    public var isSimulated: Bool = false\n    public var details: String // set WorkoutFile.rawValue to select a file for simulation mode\n}\n")),Object(c.b)("h3",{id:"devicetype"},"DeviceType"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'enum DeviceType: String {\n    case iPhone = "iPhone"\n    case movesense = "Movesense"\n    case appleWatch = "Apple Watch"\n}\n')),Object(c.b)("h3",{id:"deviceposition"},"DevicePosition"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'enum DevicePosition: String {\n    case unknown = "Unknown"\n    case leftWrist = "Left Wrist"\n    case rightWrist = "Right Wrist"\n    case leftThigh = "Left Thigh"\n    case rightThigh = "Right Thigh"\n    case belly = "Belly"\n    case neck = "Neck"\n    case leftUpperArm = "Left Upper Arm"\n    case rightUpperArm = "Right Upper Arm"\n    case chest = "Chest"\n    case leftFoot = "Left Foot"\n    case rightFoot = "Right Foot"\n}\n')),Object(c.b)("h3",{id:"deviceorientation"},"DeviceOrientation"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'enum DeviceOrientation: String {\n    case unknown = "Unknown"\n    case crownLeft = "CrownLeft"\n    case crownRight = "CrownRight"\n    case buttonUp = "ButtonUp"\n    case buttonDown = "ButtonDown"\n    case buttonRight = "ButtonRight"\n    case buttonLeft = "ButtonLeft"\n}\n')),Object(c.b)("h3",{id:"workoutfile"},"WorkoutFile"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'enum WorkoutFile: String {\n    case jumpingJacks = "20JumpingJacks"\n    case squats = "20SquatsMovingArms"\n    case sixerSets = "6erSets"\n    case running = "running"\n}\n')),Object(c.b)("h3",{id:"movement"},"Movement"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"public struct Movement {\n\n    public let typeID: Int // This represents the Category ID at the Moment.\n    public var typeLabel: String\n    public let start: Date\n    public var end: Date\n    public var durationPositive: Double?\n    public var durationNegative: Double?\n    public var gVelAmplitudePositive: Double?\n    public var gVelAmplitudeNegative: Double?\n    public var amplitude: Double?\n\n}\n")),Object(c.b)("h3",{id:"devicestatechange"},"DeviceStateChange"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),"public enum DeviceStateChange: Equatable {\n    case energyPercent(Double)\n    case dataStraming(Bool)\n    case connected(Bool)\n    case softwareVersion(String)\n}\n")),Object(c.b)("h2",{id:"scan-for-movesense-ble-devices"},"Scan for Movesense ble devices"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'\n// start scan\nfirstly {\n    when(resolved: self.movesense.startScan({ _ in\n        \n        // if new device found\n        // fetch and display devices\n        let bleDevices = self.movesense.getDevices().map { $0.serial }\n        \n    }.done {_ in\n        // if scan done\n    }\n\n// handle scan events\nself.movesense.setHandlers(\n            deviceConnected: { deviceSerial in\n                print("Device connected: \\(deviceSerial)")\n        },\n            deviceDisconnected: { deviceSerial in\n                print("Device disconnected: \\(deviceSerial)")\n        },\n            bleOnOff: { (state) in\n                print("BLE state changed: \\(state)")\n        })\n')),Object(c.b)("p",null,"Check the ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/Evomo/evomoExampleApp"}),"exampleApp")," for a better understanding of the scan process."))}u.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return v}));var i=n(0),a=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r({},t,{},e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=i,v=d["".concat(o,".").concat(p)]||d[p]||b[p]||c;return n?a.a.createElement(v,r({ref:t},l,{components:n})):a.a.createElement(v,r({ref:t},l))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,o=new Array(c);o[0]=p;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var l=2;l<c;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);