(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{158:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return c})),o.d(t,"metadata",(function(){return i})),o.d(t,"rightToc",(function(){return l})),o.d(t,"default",(function(){return d}));var n=o(1),r=o(9),a=(o(0),o(163)),c={id:"unityDetails",title:"Unity Manual Build"},i={id:"unityDetails",title:"Unity Manual Build",description:"## Manual Building",source:"@site/docs/unityDetails.md",permalink:"/motionAI-docu/docs/unityDetails",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/unityDetails.md",sidebar:"someSidebar",previous:{title:"How to scan for Movesense sensors?",permalink:"/motionAI-docu/docs/scan-movesense"},next:{title:"Swift API",permalink:"/motionAI-docu/docs/documentation"}},l=[{value:"Manual Building",id:"manual-building",children:[{value:"1: Export the xcode project from unity.",id:"1-export-the-xcode-project-from-unity",children:[]},{value:"2: Enable swift in the xcode project.",id:"2-enable-swift-in-the-xcode-project",children:[]},{value:"Cocoa Pods",id:"cocoa-pods",children:[]},{value:"Hint",id:"hint",children:[]}]}],p={rightToc:l};function d(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},p,o,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"manual-building"},"Manual Building"),Object(a.b)("h3",{id:"1-export-the-xcode-project-from-unity"},"1: Export the xcode project from unity."),Object(a.b)("p",null,"Be sure to set the minimum iOS version to 12.1 and the supported arch to ARM64 only in your unity player settings before exporting."),Object(a.b)("h3",{id:"2-enable-swift-in-the-xcode-project"},"2: Enable swift in the xcode project."),Object(a.b)("p",null,"Because the exported project is Objective-C based you must open the exported project and manually add the build setting 'SWIFT_VERSION' = 5 to your targets build settings."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},'Go to the Build Settings of your project > Click on "+" > Add User-Defined Setting > Add SWIFT_VERSION in first and 5 in second column')),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"IMPORTANT NOTE:")," Unity have recently changed the way that the exported Xcode project is organised. If one of your targets is named 'UnityFramework' then you must add the setting to that target. "),Object(a.b)("p",null,"If you do not see a target named 'UnityFramework' then you must add the setting to the target named 'Unity-iPhone'."),Object(a.b)("h3",{id:"cocoa-pods"},"Cocoa Pods"),Object(a.b)("h4",{id:"31-install-cocoa-pods-on-your-mac"},"3.1: Install Cocoa Pods on your Mac"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"sudo gem install cocoapods\n")),Object(a.b)("h4",{id:"32-add-the-evomo-cocoa-pod"},"3.2: Add the Evomo cocoa pod"),Object(a.b)("p",null,"Run pod init in the project and add the following cocoa pod to the targets of your pod file:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c"}),"use_frameworks!\npod 'EvomoUnitySDK'\n")),Object(a.b)("p",null,"Add an extra source to the top of the podfile:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c"}),"# Evomo private specs repo source\nsource 'https://bitbucket.org/evomo/evomopodsrelease.git'\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"IMPORTANT NOTE:")," "),Object(a.b)("p",null,"Once again you must check if you have a target named 'UnityFramework' and if so add the pod to that target only. If you do not have that target in your podfile then you should add the pod to the target named 'Unity-iPhone' only. "),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example Podfile:")),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c"}),"# Evomo private specs repo source\nsource 'https://bitbucket.org/evomo/evomopodsrelease.git'\n\n# Standard cocoapods specs source\nsource 'https://github.com/CocoaPods/Specs.git'\n\n# Uncomment the next line to define a global platform for your project\nplatform :ios, '12.1'\n\ntarget 'EvomoUnitySDK' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n\n  pod \"EvomoMotionAI/Basic\"\n\n  # Pods for EvomoUnitySDK\nend\n\n")),Object(a.b)("h4",{id:"33-install-pods"},"3.3: Install pods"),Object(a.b)("p",null,"Navigate to the project folder and run ",Object(a.b)("strong",{parentName:"p"},"pod install")," on the console. From then on use the generated project workspace and you should be good to go."),Object(a.b)("p",null,"This process only needs to be done the first time you export from unity. For following builds you can use the 'append' option."),Object(a.b)("p",null,"If you use the replace option then you will need to follow these steps again."),Object(a.b)("h4",{id:"34-optional-update-evomo-sdk"},"3.4: Optional: Update Evomo SDK"),Object(a.b)("p",null,"Upgrade the evomo cocoa pod if needed with the shell command ",Object(a.b)("strong",{parentName:"p"},"pod update")," in your Xcode project folder."),Object(a.b)("p",null,"Then go into the Xcode workspace and ",Object(a.b)("strong",{parentName:"p"},"clean")," the project build folder with: Product > Clean Build Folder"),Object(a.b)("h3",{id:"hint"},"Hint"),Object(a.b)("p",null,"To avoid manual inputs in Apple App Store Connect setup the encryption config."),Object(a.b)("p",null,"Unless your app is using some special encryption you can simply add Boolean a key to your Info.plist with name ITSAppUsesNonExemptEncryption and value NO."))}d.isMDXComponent=!0},163:function(e,t,o){"use strict";o.d(t,"a",(function(){return u})),o.d(t,"b",(function(){return m}));var n=o(0),r=o.n(n);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=r.a.createContext({}),d=function(e){var t=r.a.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i({},t,{},e)),o},u=function(e){var t=d(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(o),b=n,m=u["".concat(c,".").concat(b)]||u[b]||s[b]||a;return o?r.a.createElement(m,i({ref:t},p,{components:o})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=o[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,o)}b.displayName="MDXCreateElement"}}]);