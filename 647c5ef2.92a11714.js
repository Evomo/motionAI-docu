(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{139:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(1),o=n(9),a=(n(0),n(159)),i={id:"getStarted",title:"Quickstart"},c={id:"getStarted",title:"Quickstart",description:"## Register for licence key",source:"@site/docs/getStarted.md",permalink:"/motionAI-docu/docs/getStarted",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getStarted.md",sidebar:"someSidebar",next:{title:"Example App",permalink:"/motionAI-docu/docs/exampleApp"}},s=[{value:"Register for licence key",id:"register-for-licence-key",children:[]},{value:"How to install",id:"how-to-install",children:[{value:"A) CocoaPods",id:"a-cocoapods",children:[]},{value:"B) Manual XCFramework import",id:"b-manual-xcframework-import",children:[]},{value:"Apple app store requirements (Movesense)",id:"apple-app-store-requirements-movesense",children:[]}]},{value:"API - Overview",id:"api---overview",children:[{value:"Initialize and configure",id:"initialize-and-configure",children:[]},{value:"Start and stop",id:"start-and-stop",children:[]}]}],l={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"register-for-licence-key"},"Register for licence key"),Object(a.b)("p",null,"To use our SDK a license key is required which is generated after a short registration and your acceptance of the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.evomo.de/license-agreement"}),"license terms"),"."),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://subscriptions.zoho.eu/subscribe/a86776477592bad75f6bc8765d4c5c76a57851cb64dfe979651bdda4a1c7d344/beta"}),Object(a.b)("strong",{parentName:"a"},"--\x3e Register to get the license key"))),Object(a.b)("p",null,"Our beta-sdk is actually completely free for non commercial usage/testing. See details in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.evomo.de/license-agreement"}),"license terms"),". "),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Please contact us for commercial use. info@evomo.de ")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"how-to-install"},"How to install"),Object(a.b)("p",null,"There are currently two different versions of the SDK. "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Basic - smartphone sensor api only"),Object(a.b)("li",{parentName:"ul"},"Movesense - smartphone sensors + Movesense api")),Object(a.b)("h3",{id:"a-cocoapods"},"A) CocoaPods"),Object(a.b)("p",null,"The Evomo MoitionAI SDK consist of a precompiled Cocoa Touch framework bundled in a XCFramework."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Install the CocoaPods-Beta")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Important: The newest CocoaPods beta version 1.9.0.beta.3 is required, because of the new XCFramework-Bundle.")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"# Install the newest cocoapods beta min 1.9.0.beta.3\nsudo gem install cocoapods --pre\n")),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},"Add the evomo private specs repo ")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"# Evomo private specs repo source\nsource 'https://bitbucket.org/evomo/evomopodsrelease.git'\n\n# Standard cocoapods specs source\nsource 'https://github.com/CocoaPods/Specs.git'\n")),Object(a.b)("ol",{start:3},Object(a.b)("li",{parentName:"ol"},"Add the pod to your podfile with following line:")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),'# Basic is default\npod "EvomoMotionAI"\n\n# or\n\n# Movesense\npod "EvomoMotionAI/Movesense"\n')),Object(a.b)("p",null,"##",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Evomo/evomoExampleApp/blob/master/Podfile"}),"Podfile example")),Object(a.b)("h3",{id:"b-manual-xcframework-import"},"B) Manual XCFramework import"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://bitbucket.org/evomo/evomomotionaibinary/downloads/"}),"Download the newest XCFramework file"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Extract zip file and choose between BASIC and MOVESENSE bundle.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Drag & drop .xcframework manually into your project's target\n",Object(a.b)("img",Object(r.a)({parentName:"p"},{src:"/motionAI-docu/img/xcframework_drag_n_drop.gif",alt:"xcframework_drag_n_drop"})))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Embed & sign .xcframework in your project's target\n",Object(a.b)("img",Object(r.a)({parentName:"p"},{src:"/motionAI-docu/img/xcframework_embed_sign.png",alt:"xcframework_embed_sign.png"}))))),Object(a.b)("h3",{id:"apple-app-store-requirements-movesense"},"Apple app store requirements (Movesense)"),Object(a.b)("p",null,"For a successful approval of your app in the Apple app store, the following description entries must be made:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),'NSBluetoothAlwaysUsageDescription : "We use Bluetooth to communicate with extern motion sensors to make motion detection possible." (This is a example)\n\nNSBluetoothPeripheralUsageDescription : "This app requires Bluetooth to connect to an external motion sensor." (This is a example)\n')),Object(a.b)("p",null,"This messages inform the user that this app will use Bluetooth to connect with the external Movesense sensor. ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.apple.com/documentation/bundleresources/information_property_list/nsbluetoothalwaysusagedescription"}),"Details")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"api---overview"},"API - Overview"),Object(a.b)("h3",{id:"initialize-and-configure"},"Initialize and configure"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),'import EvomoMotionAI\n\n// Init the ClassificationControlLayer\nlet controlLayer = ClassificationControlLayer.shared\n\n// Declare licenseID string once (You will receive the license key from Evomo after agreeing to the license conditions.)\nClassificationControlLayer.shared.setLicense(licenseID: licenseID)\n\n// Define sensor devices\nlet devices = [Device(deviceID: "",\n                      deviceType: .iPhone,\n                      devicePosition: .leftUpperArm, \n                      deviceOrientation: .buttonDown)]\n                             \n// Subscribe to the classified movements\ncontrolLayer.movementHandler = { movement in\n    // Do something with the classified movements in time\n}\n\n// Handle heart rate changes\nClassificationControlLayer.shared.heartRateSubHandler = { hr in\n    // Do something with the heart rate\n}\n\n// Handle device events\nClassificationControlLayer.shared.deviceEventHandler = { deviceEvent in\n    let (device, event) = deviceEvent\n    \n    switch event {\n    case let .dataStraming(state):\n        // Will be triggered on data streaming state change (Bool)\n        // dataStraming = true if sensor data received in the last 0.2 seconds\n        print("\\(state ? "data streaming" : "data stream lost")")\n        \n    case let .connected(connected):\n        // Will be triggered if the device successfully connect or disconnect\n        print("\\(connected ? "connected" : "disconnected")")\n        \n    case let .energyPercent(energyPercent):\n        // Implemented for movesense devices (Apple devices dont return a energy level)\n        // The energy level will always emit on after connecting to the device.\n        print("Energy \\(Int(energyPercent * 100)) %"\n        \n    case let .softwareVersion(version):\n        // not implemented now\n        // Will return the software version of the device after connecting\n        print("OS/FW - \\(version)")\n    }\n}\n\n')),Object(a.b)("h3",{id:"start-and-stop"},"Start and stop"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),'// Start movement classification\nClassificationControlLayer.shared.start(\n    devices: devices,\n    isConnected: {\n        print("--- All devices connected ---")\n}, isStarted:{\n    print("--- All devices started ---")\n}, isFailed: { error in\n    print("Start classification failed: \\(error)")\n})\n    \nwait(10)\n\n// Stop movement classification\n_ = ClassificationControlLayer.shared.stop()\n\n')))}p.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=r,u=b["".concat(i,".").concat(m)]||b[m]||d[m]||a;return n?o.a.createElement(u,c({ref:t},l,{components:n})):o.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);